# Generated by Django 2.0.5 on 2018-07-30 17:13

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='InfoAuthentification',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Administrateur',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('info_authentification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Adresse',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('no_civique', models.CharField(max_length=30)),
                ('nom_rue', models.CharField(max_length=50)),
                ('code_postal', models.CharField(max_length=6)),
                ('ville', models.CharField(max_length=100)),
                ('pays', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'adresse',
                'verbose_name_plural': 'adresses',
                'db_table': 'adresse',
            },
        ),
        migrations.CreateModel(
            name='CarteCredit',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('nom_titulaire', models.CharField(max_length=200)),
                ('num_carte', models.CharField(max_length=100, unique=True)),
                ('annee_expiration', models.CharField(max_length=2)),
                ('mois_expiration', models.CharField(max_length=2)),
                ('cvv', models.CharField(max_length=255)),
                ('date_emission', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'cartecredit',
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('telephone', models.CharField(max_length=11)),
                ('type', models.CharField(choices=[('E', 'Entreprise'), ('P', 'Particulier')], max_length=1)),
                ('nom_particulier', models.CharField(blank=True, max_length=50, null=True)),
                ('prenom_particulier', models.CharField(blank=True, max_length=50, null=True)),
                ('sexe', models.CharField(blank=True, choices=[('H', 'Homme'), ('F', 'Femme'), ('A', 'Non défini')], max_length=1, null=True)),
                ('date_naissance', models.DateField(blank=True, null=True)),
                ('nom_entreprise', models.CharField(blank=True, max_length=50, null=True)),
                ('numero_entreprise', models.CharField(blank=True, max_length=50, null=True)),
                ('info_authentification', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'client',
                'verbose_name_plural': 'clients',
                'db_table': 'client',
            },
        ),
        migrations.CreateModel(
            name='Compte',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('num_compte', models.CharField(max_length=8, unique=True)),
                ('solde', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('date_ouverture', models.DateTimeField(auto_now_add=True)),
                ('date_fermeture', models.DateTimeField(null=True)),
            ],
            options={
                'verbose_name': 'compte',
                'db_table': 'compte',
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('token', models.CharField(blank=True, max_length=512, null=True)),
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.Client')),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date_debut', models.DateTimeField(auto_now_add=True)),
                ('date_fin', models.DateTimeField(null=True)),
                ('montant', models.DecimalField(decimal_places=2, max_digits=10)),
                ('solde_avant', models.DecimalField(decimal_places=2, max_digits=10)),
                ('solde_apres', models.DecimalField(decimal_places=2, max_digits=10)),
                ('etat', models.CharField(choices=[('ACC', 'Acceptée'), ('REF', 'Refusée'), ('GEL', 'Gelée')], max_length=3)),
            ],
            options={
                'db_table': 'transaction',
            },
        ),
        migrations.CreateModel(
            name='TypeTransaction',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('VMT', 'Virement debit-debit'), ('PMT', 'Paiement debit-credit'), ('ACT', 'Achat credit-debit'), ('RBT', 'Remboursement credit-credit')], max_length=50)),
                ('description', models.TextField()),
            ],
            options={
                'db_table': 'type_transaction',
            },
        ),
        migrations.CreateModel(
            name='Courant',
            fields=[
                ('compte_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='api.Compte')),
                ('courant_id', models.AutoField(primary_key=True, serialize=False)),
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.Client')),
            ],
            options={
                'db_table': 'courant',
            },
            bases=('api.compte',),
        ),
        migrations.CreateModel(
            name='Credit',
            fields=[
                ('compte_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='api.Compte')),
                ('credit_id', models.AutoField(primary_key=True, serialize=False)),
                ('limite', models.DecimalField(decimal_places=2, max_digits=10)),
                ('carte_credit', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.CarteCredit')),
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.Client')),
            ],
            options={
                'db_table': 'credit',
            },
            bases=('api.compte',),
        ),
        migrations.AddField(
            model_name='transaction',
            name='compte',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='transactions', to='api.Compte'),
        ),
        migrations.AddField(
            model_name='transaction',
            name='trx',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='transaction', to='api.Transaction'),
        ),
        migrations.AddField(
            model_name='transaction',
            name='type_transaction',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.TypeTransaction'),
        ),
        migrations.AddField(
            model_name='adresse',
            name='client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='adresses', to='api.Client'),
        ),
    ]
